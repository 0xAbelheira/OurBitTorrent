FS_Tracker:

tracker.py pode ser o ponto de entrada para o FS_Tracker.
Criar uma classe para representar o tracker.
Implementar um servidor UDP para que os FS_Nodes possam registrar seus pacotes e informações do arquivo.
Utilizar um dicionário para manter um DB sobre as ficheiros, pacotes e ip´s
Implementar uma API para que os FS_Nodes possam consultar as informações dos pacotes e arquivos.

Calcular payload.
Definir a comunicacao
Começar com strings e mudar para bytes

FS_Node:

node.py pode ser o ponto de entrada para o FS_Node.
Criar uma classe para representar um nó do FS_Node.
Implementar um servidor TCP para que outros FS_Nodes possam se conectar e trocar informações.
Implementar algoritmos de seleção para decidir a quem enviar pacotes.
Manter um registro de pacotes que o nó possui e os pacotes que deseja receber.
Comunicação entre FS_Tracker e FS_Node:

Implementar um protocolo para a comunicação entre o FS_Tracker e o FS_Node via UDP. Isso pode incluir mensagens
para registrar pacotes, consultar informações e atualizar informações. 
Implementar um protocolo para a comunicação entre FS_Nodes via TCP. Isso pode incluir mensagens para 
trocar informações de pacotes e coordenar a transferência.

Cliente/Servidor simultâneo:

Para que o FS_Node aja como cliente e servidor simultaneamente, vamos precisar de threads separadas 
para tratar a comunicação com outros FS_Nodes e atender a solicitações de outros FS_Nodes.


Teste e Depuração:

Criar testes para verificar se o FS_Tracker e o FS_Node funcionam conforme o esperado, utilizando o core
e o wireshark.
?Usar registros e depuração para rastrear problemas.?

Escalabilidade:

Pensar na escalabilidade desde o início. Considerar como se vai comportar o trabalho com muitos FS_Nodes e pacotes.


---------------------------

    Ambos funcionam para TCP (boa ideia usar para o tracker)
FTP -> 
HTTP -> Possui um header maior

    Verificar estruturas protoclares
    Porta do cliente é aleatória, ao contrário da do servidor

    1.Presentation (Dentro do FS_Tracker)
        <IP adress> <L Files> <L blocks>
        (Aqui podemos ter tamnho fixo) (campo variavel) (campo variavel)
        TLV
        Saber onde terminam os nossos campos

-----------------------------
Para a mensagem Hello, podemos usar serialização
Ver opções a usar (protocol buffers, JSON ou pickle)
Ou podemos usar bytes através da ferramenta encode
